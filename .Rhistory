library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
clear
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
library(datasets)
?mtcars
head(mtcars)
barplot(mtcars$cyl)             # Doesn't work
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
install.packages("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("08_html")
runApp('turing/r_shiny/stockVis')
# Load packages ----
library(shiny)
library(quantmod)
# Load packages ----
install.packages("quantmod")
library(shiny)
library(quantmod)
# Source helpers ----
source("helpers.R")
runApp('turing/r_shiny/stockVis')
install.packages("quantmod")
shiny::runApp()
runApp()
install.packages("quantmod")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("quantmod")
shiny::runApp()
install.packages("PerformanceAnalytics")
library(shiny)
library(quantmod)
# Source helpers ----
source("helpers.R")
# User interface ----
ui <- fluidPage(
titlePanel("Security Rolling Volatility"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Yahoo finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
finalInput <- reactive({
window <- 30
spy_rolling_sd <- na.omit(rollapply(dataInput(), window, function(x) StdDev(x)))
})
output$plot <- renderPlot({
chartSeries(finalInput(), theme = chartTheme("white"),
type = "line", log.scale = input$log, TA = NULL)
})
}
dataInput()
getSymbols
dataInput
dataInput()
runApp()
shiny::runApp()
library(quantmod)
dataInput <- reactive({
getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
dataInput
finalInput <- reactive({
window <- 30
spy_rolling_sd <- na.omit(rollapply(dataInput(), window, function(x) StdDev(x)))
})
finalInput
window
spy_rolling_sd
dataInput()
dataInput <- ({ getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
library(quantmod)
dataInput <- ({ getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
library(quantmod)
dataInput <- ({ getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
dataInput <- ({ getSymbols("SPY", src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
dataInput <- ({ getSymbols("SPY", src = "yahoo",
from = '2013-01-01',
to = '2017-06-27',
auto.assign = FALSE)
})
dataInput
finalInput <- ({
window <- 30
spy_rolling_sd <- na.omit(rollapply(dataInput(), window, function(x) StdDev(x)))
})
finalInput <- ({
window <- 30
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev(x)))
})
library(quantmod)
library(PerformanceAnalytics)
library(PerformanceAnalytics)
dataInput <- ({ getSymbols("SPY", src = "yahoo",
from = '2013-01-01',
to = '2017-06-27',
auto.assign = FALSE)
})
finalInput <- ({
window <- 30
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev(x)))
})
finalInput
finalInput <- ({
window <- 30
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x, daily scale = 252)))
})
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x, scale = 252)))
spy_rolling_sd
runApp()
install.packages("quantmod")
library(shiny)
library(quantmod)
library(PerformanceAnalytics)
# Source helpers ----
source("helpers.R")
runApp()
install.packages("quantmod")
shiny::runApp()
runApp()
install.packages("quantmod")
# Run the app
shinyApp(ui, server)
shiny::runApp()
runApp()
install.packages("quantmod")
shiny::runApp()
runApp()
runApp()
if (FALSE) {
spy_rolling_sd <- na.omit(rollapply(dataInput(), window, function(x) StdDev.annualized(x)))
} else {
spy_rolling_sd <- na.omit(rollapply(dataInput(), window, function(x) StdDev.annualized(x, scale = 252)))
}
dataInput <- ({ getSymbols("SPY", src = "yahoo",
from = '2013-01-01',
to = '2017-06-27',
auto.assign = FALSE)
})
finalInput <- ({
window <- 30
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev(x)))
})
if (FALSE) {
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x)))
} else {
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x, scale = 252)))
}
spy_rolling_sd
if (FALSE) {
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x)))
} else {
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x, scale = 252)))
}
spy_rolling_sd
head(spy_rolling_sd)
if (TRUE) {
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x)))
} else {
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x, scale = 252)))
}
head(spy_rolling_sd)
spy_rolling_sd <- na.omit(rollapply(dataInput, window, function(x) StdDev.annualized(x)))
head(spy_rolling_sd)
runApp()
runApp()
# User interface ----
ui <- fluidPage(
titlePanel("stockVis"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
sliderInput("integer", "Window:",
min = 0, max = 60,
value = 30),
checkboxInput("adjust",
"Annualize Volatility", value = FALSE)
),
mainPanel(plotOutput("plot"))
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
input$integer
finalInput <- reactive({
if (!input$range) {
na.omit(rollapply(dataInput(), input$integer, function(x) StdDev(x)))
} else {
na.omit(rollapply(dataInput(), input$integer, function(x) StdDev.annualized(x, scale = 252)))
}
})
input$integer
runApp()
# User interface ----
ui <- fluidPage(
titlePanel("stockVis"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
sliderInput("integer", "Window:",
min = 0, max = 60,
value = 30),
checkboxInput("adjust",
"Annualize Volatility", value = FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
finalInput <- reactive({
if (!input$range) {
na.omit(rollapply(dataInput(), input$integer, function(x) StdDev(x)))
} else {
na.omit(rollapply(dataInput(), input$integer, function(x) StdDev.annualized(x, scale = 252)))
}
})
output$plot <- renderPlot({
chartSeries(finalInput(), theme = chartTheme("white"),
type = "line", log.scale = FALSE, TA = NULL)
})
}
input$intege
input$dates[2]
output$plot <- renderPlot({
chartSeries(finalInput(), theme = chartTheme("white"),
type = "line", log.scale = FALSE, TA = NULL)
})
runApp()
input$integer
input$range
dataInput
finalInput
head(finalInput)
finalInput()
runApp()
runApp()
runApp()
window = input$integer
window
runApp()
runApp()
runApp()
dara
data
head(data)
head(data$SPY.Close)
window
return(na.omit(rollapply(data$SPY.Close, window, function(x) StdDev(x))))
runApp()
spy_rolling_sd <- na.omit(rollapply(data$SPY.Close, window, function(x) StdDev(x)))
spy_rolling_sd
spy_rolling_sd <- na.omit(rollapply(data, window, function(x) StdDev(x)))
spy_rolling_sd
runApp()
input$range
runApp()
head(data)
runApp()
runApp()
asset_returns_xts <- na.omit(Return.calculate(data$SPY.Close, method = "log"))
asset_returns_xts
head(asset_returns_xts)
runApp()
runApp()
runApp()
window
head(data)
runApp()
runApp()
sym
data$sym.Close
head(data)
head(data$Close)
head(data[2])
head(data[:2])
head(data[3])
head(data[3:3])
data %>% select(1, 3)
data(1)
head(data[,3])
head(data[,2])
head(data[,4])
runApp()
install.packages('rsconnect')
runApp()
